Project Driveapp {
    database_type: 'PostgreSQL'
}


enum MediaCategory {
  AUDIO
  IMAGE
  VIDEO
  UNKNOWN
}

enum AuthSourceProvider {
  EMAIL
  GOOGLE
  APPLE
}

enum HistoryKind {
  CREATE
  DELETE
  UPDATE
  UNKNOWN
}

enum Target {
  VOCAL
  ARTIST
  GENERAL
  UNKNOWN
}

enum AvailableFundingOptions {
  WALLET_CREDIT
  FUNDING
}


TableGroup CoreSystem {
  Configs
  History
  Feature
  Profile
  ProfileFeature
  Url
  Media
  MediaMetadata
  AnalyticsData
  Badge
  Genre
}

TableGroup Checkout {
  SaleItem
  CartItem
  Cart
}

TableGroup VocalThings {
  Vocal
  VocalBadge
  VocalDescription
  VocalSaleItem
  VocalGenre
}


TableGroup ArtistThings  {
  Artist
  ArtistBadge
  ArtistDescription
  ArtistSaleItem
  ArtistGenre
}

TableGroup UserThings {
  User
  UserVocalItem
  Order
}


// [-----GENERIC----]

Table Genre {
  Guid uniqueidentifier [pk, not null, unique]
  Name text [not null]
  Description text
  CreateAt datetime2
  DeletedAt datetime2
  UpdatedAt datetime2
}

Table Configs {
  Guid uniqueidentifier [pk, not null, unique]
  ConfigKey text [not null]
  Value text
}

Table Feature {
  Guid  uniqueidentifier [pk, unique, not null]
  FeatureKey text [pk, unique]
  Value text [not null]
  Description text
  FeatureName text [not null]
}



Table AnalyticsData { // maybe another db?
  Guid uniqueidentifier [pk, not null, unique]
  Type text
  Count int
  LastUpdatedAt datetime2
}

Table Url {
  Guid uniqueidentifier [pk, not null, unique]
  TargetObject uniqueidentifier [not null]
  TargetObjectType Target [not null]
  Main bool
  Value text [not null, unique]
  Active bool [default: TRUE]
  CreateAt datetime2
  DeletedAt datetime2
}


Table Media {
  Guid uniqueidentifier [pk, not null, unique]
  Source text
  MimeType text
  Name text
  Category  MediaCategory [not null]
  IsVisible bool
}

Table MediaMetadata {
  Label text
  Value text
  Media uniqueidentifier [ ref: > Media.Guid, not null] // on delete cascade
}

Table Profile {
  Guid  uniqueidentifier [pk, unique, not null]
  ProfileKey text [unique, pk]
  Name text [unique]
}

Table ProfileFeature {
  Profile uniqueidentifier [ref: <> Profile.Guid]
  Feature uniqueidentifier [ref: <> Feature.Guid]
  Enabled bool
}

Table History {
  Event text [not null]
  User uniqueidentifier [ref: > User.Guid]
  Kind HistoryKind [not null]
  TargetObject uniqueidentifier [
    not null,
    note: '''
      this target object could be any kind of table that we can have. For example: Artist, Vocal, Config, etc
      '''  ]
  PrevState json
  NextState json
  Description text [not null] // markdown
  EventDate datetime2 [not null]
}

Table Badge {
  Guid uniqueidentifier [pk, not null, unique]
  Color tinytext
  Text text
  Target text [note: 'It will be associated targets to some specifica tag']
  CreateAt datetime2
  DeletedAt datetime2
  UpdatedAt datetime2
}

// [-----USER----]

Table  User {
  Guid  uniqueidentifier [pk, unique, not null]
  Profile text [ref: > Profile.Guid, not null]
  Email text [not null, unique]
  AuthSource AuthSourceProvider
  Active bool [default: TRUE]
  CreateAt datetime2
  DeletedAt datetime2
  UpdatedAt datetime2
  Thumbnail uniqueidentifier [ref: - Media.Guid]
}


Table UserVocalItem  {
  Guid uniqueidentifier [pk, not null, unique]
  User uniqueidentifier [ref: > User.Guid, not null]
  DownloadCount int [default: 0, note: '''
    this is the number of times that user downloaded the vocal. It should be increased by 1 each time
    that user downloaded the vocal.
  ''']
  VocalSaleItem uniqueidentifier [ref: > VocalSaleItem.Guid, not null]
  Vocal uniqueidentifier [ref: > Vocal.Guid, note: '''
    this is the vocal that was purchased by user. When empty, it means that the vocal was deleted by admin, but it should be available to user under this snapshot.
  ''']
  Artist uniqueidentifier [ref: > Artist.Guid, note: '''
    this is the artist that was purchased by user. When empty, it means that the artist was deleted by admin, but it should be available to user under this snapshot.
  ''']
  DeliveredAt datetime2 [note: '''
    this is the date when the vocal was delivered to user. It could be a date when the vocal was
    delivered from licensing service to user. When it happens we should create a new record in this table from checkout items references, in order to transfer to the user. It should be deleted when the user ask for a refund.
  ''']
  ArtfactLink text [not null, unique]
  DeletedAt datetime2 [note: '''
    this is the date when the vocal was deleted by admin. It should be defined when some refund was requested by user and accepted by admin.
  ''']
  ParentUserVocalItem uniqueidentifier [ref: > UserVocalItem.Guid, note: '''
    this is the parent vocal item that was purchased by user. It should be defined when some upgrade was aplied to vocal item, or for some lirics as well.
  ''']
}

Table UserUrl {
  User uniqueidentifier [ref: > User.Guid, not null]
  Url uniqueidentifier [ref: > Url.Guid, not null]
  IsMain bool [default: FALSE]
  IsVisible bool [default: TRUE]
}

// [-----ARTIST----]

Table Artist {
  Guid uniqueidentifier [pk, not null, unique]
  ArtistName text [not null]
  Bio text
  RatingLabel text
  RatingValue text
  RatingRecordingQuality float
  RatingCommunicationLevel float
  RatingFriendRecomendation float
  Verified bool
  HireNowActive bool [default: FALSE]
  JoinAt datetime2
  CreateAt datetime2
  DeletedAt datetime2
  UpdatedAt datetime2
}

Table ArtistBadge {
  Artist uniqueidentifier [ref: > Artist.Guid, not null]
  Badge uniqueidentifier [ref: > Badge.Guid, not null]
}


Table ArtistDescription {
  Guid uniqueidentifier [pk, not null, unique]
  Label text
  Value text
  IconMedia uniqueidentifier [ref: > Media.Guid]
  Artist uniqueidentifier [ref: > Artist.Guid, not null]
  Icon text [
    note: '''
      it could be some FA icon value, but it accepting CUSTOM key. for this specific case, IconMedia is required
     '''
  ]
}

Table ArtistSaleItem {
  Guid uniqueidentifier [pk, not null, unique]
  Artist uniqueidentifier [ ref: > Artist.Guid, not null]
  SaleItem uniqueidentifier [ref: - SaleItem.Guid]
  ItemType ArtistSaleItemType [not null]
}

enum ArtistSaleItemType {
  REQUIRED
  UPGRADE_OPTION
}


Table ArtistGenre {
  Artist uniqueidentifier [ref: > Artist.Guid, not null]
  Genre uniqueidentifier [ref: > Genre.Guid, not null]
}

// [------CHECKOUT----]
Table SaleItem {
  Guid uniqueidentifier [pk, not null, unique]
  Title text
  Price float
  Active bool
  FundingSource AvailableFundingOptions

}

Table CartItem {
  Cart uniqueidentifier [ref: > Cart.Guid, not null]
  SaleItem uniqueidentifier [ref: > SaleItem.Guid, not null]
  Thumbnail uniqueidentifier [ref: > Media.Guid]
  Title text [not null]
  Description text
  Price float [not null]
  Amount float
}

Table Cart {
  Guid uniqueidentifier [pk, not null, unique]
  CartId text [not null]
  CreatedAt datetime
  User uniqueidentifier [ref: > User.Guid, not null]
}

enum OrderStatus {
  WAITING_PAYMENT [note: 'Waiting for payment gateway result']
  PAID [note: 'Once payment gateway was successfully, then it could be push to release state']
  DENIED [note: 'When payment was declined by any kind of resons from payment gateway']
  IN_PROGRESS [note: 'It is under triage for next step']
  WAITING_RELEASE [note: 'the order is next in queue to licensing service, in order to release the sale items to customer under a license']
  RELEASED [note: 'final step, when all proccess was sucessfully by licensing and payment gateway processes']
}

Table Order {
  OrderId text [not null]
  Cart uniqueidentifier [ref: - Cart.Guid]
  User uniqueidentifier [ref: > User.Guid, not null]
  SaleItem uniqueidentifier [ref: > SaleItem.Guid, not null]
  SeletectFundingOption AvailableFundingOptions
  Status OrderStatus [not null]
  ReferenceCode text
}



// [-----VOCAL----]
Table Vocal {
  Guid uniqueidentifier [pk, not null, unique]

  Artist uniqueidentifier [ref: > Artist.Guid, not null]

  VocalName text [not null]
  VocalDescription text
  VocalType text
  VocalRatingCount int
  VocalRatingLabel text
  VocalRatingRecordingQuality float
  VocalRatingCommunicationLevel float
  VocalRatingFriendRecomendation float
  VocalIsVisible bool [default: TRUE]
  VocalIsActive bool [default: TRUE]

  VocalBPM int
  VocalKey text
  VocalDuration int

  VocalSlug uniqueidentifier [not null, unique, ref: - Url.Guid]
  VocalThumbnail uniqueidentifier [ref: > Media.Guid]
  VocalCover uniqueidentifier [ref: > Media.Guid]
  VocalDemo uniqueidentifier [ref: > Media.Guid]

  CreateAt datetime2 [default: 'now()']
  DeletedAt datetime2
  UpdatedAt datetime2

}

Table VocalSaleItem {
  Guid uniqueidentifier [pk, not null, unique]
  Vocal uniqueidentifier [ref: > Vocal.Guid]
  SaleItem uniqueidentifier [ref: - SaleItem.Guid]
  VocalSaleType VocalSaleType [not null]
  ItemType VocalSaleItemType [not null]
  VocalLicensyType enum [not null, note: '''
    this is the vocal type that we can have. For example:
    - Vocal: this is a regular vocal
    - Lirics: this is a lirics that we can have
    - Vocal+Lirics: this is a special case, that we can have a vocal with lirics
  ''']
  LicenseType VocalSaleItemLicenseType [note: '''
    this could be a license type, that we can have. For example:
    - Exclusive: this is a special case, that we can have a exclusive vocals that should be sealed once
    - Non-Exclusive: regular paid vocals
    - Prime: this is a special case, that we can have a prime vocals
  ''']
  Media uniqueidentifier [ref: > Media.Guid]
}

Table VocalBadge {
  Vocal uniqueidentifier [ref: > Vocal.Guid, not null]
  Badge uniqueidentifier [ref: > Badge.Guid, not null]
}

Table VocalDescription {
  Guid uniqueidentifier [pk, not null, unique]
  Label text
  Value text
  IconMedia uniqueidentifier [ref: > Media.Guid]
  Vocal uniqueidentifier [ref: > Vocal.Guid, not null]
  Icon text [
    note: '''
      it could be some FA icon value, but it accepting CUSTOM key. for this specific case, IconMedia is required
     '''
  ]
}

Table VocalGenre {
  Vocal uniqueidentifier [ref: > Vocal.Guid, not null]
  Genre uniqueidentifier [ref: > Genre.Guid, not null]
}


enum VocalSaleItemType {
  REQUIRED
  UPGRADE_OPTION
}

enum VocalSaleItemLicenseType {
  EXCLUSIVE
  NON_EXCLUSIVE
  PRIME
}

enum VocalSaleType {
  SUBSCRIPTION_ONLY
  FREE
  PREMIUM
}
